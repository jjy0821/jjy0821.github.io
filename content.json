{"pages":[],"posts":[{"title":"Redux","text":"reference : https://ko.redux.js.org/introduction/getting-started/ Redux란 무엇인가? 자바스크립트 앱을 위한, 예측 가능한 상태 컨테이너 일관적으로 동작 가능하고, 서버, 클라이언트, 네이티브 등 서로 다른 환경에서 작동하며 테스트 하기 쉬운 앱을 작성하고자 할 때 redux를 사용 우리가 자바스크립트로 어떤 앱을 만들고자 할 때, 상태를 관리하기 위한 로직이 간단하다면 기존 react에서 부모 컴포넌트를 거쳐 상태를 전달하고 받는 형식을 사용해도 상관없지만, 좀 더 복잡하거나 상태 관리에 있어 어려움이 생기는 경우 redux같은 상태 관리 도구를 이용해서 간단하게 만들 수 있다. 따라서 반드시 redux를 사용하기보다는 우리가 redux를 사용함에 따라서 어떤 시간적,비용적 이점이 존재하는지 파악한 후 사용하는 것이 적절하다. redux를 사용하기에 적절한 때를 정리하면 다음과 같다. 계속해서 바뀌는 상당한 양의 데이터들이 존재할 때 상태를 위한 단 하나의 근원이 필요할 때 최상위 컴포넌트가 모든 상태를 가지고 있는 것이 더 이상 적절하다 느껴지지 않을 때 Redux 설치 Redux Toolkit : Redux의 공식 개발 도구. 12345# NPMnpm install @reduxjs/toolkit# Yarnyarn add @reduxjs/toolkit React Redux App을 생성 1npx create-react-app my-app --template redux Redux 코어 12345# NPMnpm install redux# Yarnyarn add redux Redux 사용 예제12345678910111213141516171819202122232425262728293031323334import { createStore } from 'redux'/*- reducer : (state,action) =&gt; state 형태의 순수 함수리듀서는 액션이 어떻게 상태를 다음 상태로 변경하는지 서술- 상태의 모양은 primitive, array, objective, 자료구조까지 전부 가능.-&gt; 가장 중요한 점은 상태 객체를 변경해서는 안된다는 것. 그리고 상태가 바뀌면 새로운 객체를 반환해야 한다는 것. */function counter(state = 0, action) { switch (action.type) { case 'INCREMENT': return state + 1 case 'DECREMENT': return state - 1 default: return state }}// 앱의 상태를 보관하는 redux 저장소를 생성// api로는 {subscribe, dispatch, getState}가 존재.let store = createStore(counter)// subscribe를 이용해 상태 변화에 따른 ui 변경 가능store.subscribe(() =&gt; console.log(store.getState())))// 내부 상태를 변경하는 유일한 방법 -&gt; 액션을 보내는 것!store.dispatch({ type: 'INCREMENT' })store.dispatch({ type: 'INCREMENT' })store.dispatch({ type: 'DECREMENT' })","link":"/2021/04/05/Redux/"},{"title":"리액트로 TO DO LIST 구현하기","text":"CRUD … 입력창에 새로 입력한 내용이 데이터로 추가되어야한다. 추가된 데이터를 렌더링하여 웹페이지로 읽어올 수 있어야한다. 기존에 작성된 내용을 수정하여 업데이트 할 수 있어야한다. delete 버튼을 눌렀을 떄, 목록에서 삭제 될 수 있어야 한다. ! update 파트를 구현하기 위해서 hook 이용하여 수정해보기","link":"/2021/04/03/new-post/"}],"tags":[],"categories":[]}