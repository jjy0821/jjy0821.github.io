{"pages":[],"posts":[{"title":"Redux","text":"Redux 자바스크립트 앱을 위한, 예측 가능한 상태 컨테이너라는 개념으로 나와있는데 간단하게 말해서 상태를 더 효율적으로 관리하기 위해 사용하는 라이브러리이다. 리덕스를 사용하기 위해서는 다음과 같은 세가지 규칙이 존재한다. 스토어는 무조건 하나만 존재한다. 리덕스의 state는 읽기 전용이다. 변화는 순수 함수로만 구성한다. 순수함수는 동일한 인자가 들어갈 때 항상 같은 값이 나와야 한다. 또한 함수에서 외부의 변수 값을 변경하거나 함수 내로 들어온 인자 값을 변화하게 만드는 일 역시 일어나서는 안된다. 만약 자바스크립트로 어떤 앱을 만들고자 할 때, 상태를 관리하기 위한 로직이 간단하다면 기존 react에서 부모 컴포넌트를 거쳐 상태를 전달하고 받는 것 처럼, 컴포넌트 자신이 개별적으로 상태를 관리해도 크게 무리가 없다. 하지만 좀 더 복잡하거나 상태 관리에 있어 어려움이 생기는 경우, redux같은 상태 관리 도구를 이용해서 간단하게 만들 수 있다. 따라서 반드시 redux를 사용하기보다는 우리가 redux를 사용함에 따라서 어떤 시간적,비용적 이점이 존재하는지 파악한 후 사용하는 것이 적절하다. redux를 사용하기에 적절한 때를 정리해보면 다음과 같다. 계속해서 바뀌는 상당한 양의 데이터들이 존재할 때 상태를 위한 단 하나의 소스만이 필요할 때 최상위 컴포넌트가 모든 상태를 가지고 있는 것이 적절하다고 느껴지지 않을 때 리덕스에서 사용되는 키워드Store어플리케이션의 상태 값들을 집중적으로 관리한다. 상태 값들을 가지고 있으며 중앙에서 값들을 관리하는 개념으로 생각하면 된다. 리듀스에 의해서만 상태값이 변경된다. Action상태에 어떤 변화가 필요할 경우 참조하는 객체로, 우리는 스토어에 직접 접근할 수 없기 때문에 액션을 먼저 발행한 다음 스토어에서 이 액션을 접수했을 때 상태를 갱신하게 만들 수 있다. 액션은 어떤 형태로 실행될 지 명시해주는 type 속성을 반드시 가져야한다. 액션 생성함수는 액션을 만드는 함수로, 파라미터를 가져와 액션 객체 형태로 만들어준다. 액션을 사용하기 위해 반드시 액션 생성함수를 만들어야 하는 것은 아니지만, 나중에 컴포넌트에서 쉽게 액션을 발생시키기 위해서 작성해주는 것이다. Reducer상태에 변화를 일으키는 로직을 가진 함수로, 이전의 상태와 액션을 합쳐서 새로운 상태를 만든다. 따라서 리듀서는 상태, 액션이라는 두 파라미터를 받아오고, 새로운 상태를 만들어 반환한다. 초기 상태는 리듀서의 디폴트 인수에서 정의한다. 리듀서 함수는 순수함수여야하고, 결과 값을 출력할 때 파라미터의 에 의존해야 하고, 같은 결과를 출력해야한다. 리듀서 함수에서 상태를 사용하면 반드시 상태의 초기화가 필요하다. 상태가 변할 때 전해진 상태는 자체의 값으로 대체 되는 것이 아니고, 합성이 되는 것처럼 쓰여지며 반환된 상태는 스토어에 반영된다. Object.Assign()을 사용하거나, sperad 문법을 사용해 새로운 객체를 리턴해주어야한다. Dispatchstore의 내장함수 중 하나다. action을 발생시키는 것이 dispatch이며, dispatch라는 함수에 파라미터로 action을 전달한다. 호출이 되면 store에서 reducer 함수를 실행시키고, 해당 액션을 처리하는 로직이 있을 경우 액션을 참고하고 새로운 상태로 만들어준다. Subscribe스토어의 값이 필요한 컴포넌트는 스토어를 구독하는데, 이 작업은 react-redux의 connect 함수가 필요하다. Redux Flow Diagram UI에서 컴포넌트 내에 존재하는 이벤트가 호출된다. 이벤트와 연결된 액션 생성자(함수)가 호출된다. 액션 생성자에서 생성된 액션이 호출된다. 액션이 리듀서로 전달된다. 이 과정을 디스패치에서 담당한다. 디스패치된 액션에 따라 기존의 상태값과 액션을 통해 다음 상태값으로 변화할 수 있도록 한다. 렌더링되어 UI에 나타난다.","link":"/2021/04/05/Redux/"},{"title":"리액트로 TO DO LIST 구현하기","text":"CRUD … 입력창에 새로 입력한 내용이 데이터로 추가되어야한다. 추가된 데이터를 렌더링하여 웹페이지로 읽어올 수 있어야한다. 기존에 작성된 내용을 수정하여 업데이트 할 수 있어야한다. delete 버튼을 눌렀을 떄, 목록에서 삭제 될 수 있어야 한다. ! update 파트를 구현하기 위해서 hook 이용하여 수정해보기","link":"/2021/04/03/new-post/"}],"tags":[],"categories":[]}