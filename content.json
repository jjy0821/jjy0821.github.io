{"pages":[],"posts":[{"title":"Redux","text":"reference https://ko.redux.js.org/introduction/getting-started/ https://qiita.com/mpyw/items/a816c6380219b1d5a3bf?utm_campaign=popular_items&amp;utm_medium=feed&amp;utm_source=popular_items https://react.vlpt.us/redux/ Redux란 무엇인가? 자바스크립트 앱을 위한, 예측 가능한 상태 컨테이너 일관적으로 동작 가능하고, 서버, 클라이언트, 네이티브 등 서로 다른 환경에서 작동하며 테스트 하기 쉬운 앱을 작성하고자 할 때 redux를 사용 만약 자바스크립트로 어떤 앱을 만들고자 할 때, 상태를 관리하기 위한 로직이 간단하다면 기존 react에서 부모 컴포넌트를 거쳐 상태를 전달하고 받는 것 처럼, 컴포넌트 자신이 개별적으로 상태를 관리해도 크게 무리가 없다. 하지만 좀 더 복잡하거나 상태 관리에 있어 어려움이 생기는 경우, redux같은 상태 관리 도구를 이용해서 간단하게 만들 수 있다. 따라서 반드시 redux를 사용하기보다는 우리가 redux를 사용함에 따라서 어떤 시간적,비용적 이점이 존재하는지 파악한 후 사용하는 것이 적절하다. redux를 사용하기에 적절한 때를 정리해보면 다음과 같다. 계속해서 바뀌는 상당한 양의 데이터들이 존재할 때 상태를 위한 단 하나의 소스만이 필요할 때 최상위 컴포넌트가 모든 상태를 가지고 있는 것이 적절하다고 느껴지지 않을 때 Redux 설치 Redux Toolkit : Redux의 공식 개발 도구. 12345# NPMnpm install @reduxjs/toolkit# Yarnyarn add @reduxjs/toolkit React Redux App을 생성 1npx create-react-app my-app --template redux Redux 코어 12345# NPMnpm install redux# Yarnyarn add redux 리덕스에서 사용되는 키워드Store상태를 집중적으로 관리한다. 1234567891011121314151617181920212223242526// twitter가 redux를 사용한다면? { { // session에 관한 데이터 session : { loggedIn : true , user : { id : &quot; 114514 &quot; , screenName : &quot; @mpyw &quot; , }, }, //timeline에 관한 데이터 timeline : { type : &quot; home &quot; , statuses : [ { id : 1 , screenName : &quot; @mpyw &quot; , text : &quot; hello &quot; }, { id : 2 , screenName : &quot; @mpyw &quot; , text : &quot; bye &quot; } ] }, // notification에 관한 데이터 notification : [] }} Action 상태에 어떤 변화가 필요할 경우 발생시킨다. Store에 직접 접근할 수 없기 때문에, Action을 먼저 생성한 다음 Store에서 이 Action을 감지했을 때 state를 갱신하게 만들 수 있다. Action은 기본적으로 다음과 같은 포맷을 가진 객체가 된다. 12345 { // 액션 객체는 type 필드만큼은 필수적으로 가진다. type: &quot;액션의 종류를 한번에 식별할 수 있는 문자열 혹은 심볼&quot;, payload: &quot;액션의 실행에 필요한 임의의 데이터&quot;,} 액션 생성함수는 액션을 만드는 함수로, 파라미터를 가져와 액션 객체 형태로 만들어준다. 반드시 액션 생성함수를 만들어야 하는 것은 아니지만, 나중에 컴포넌트에서 쉽게 액션을 발생시키기 위해서 사용하는 것이다. 1234567891011export function addTodo(data) { return { type: &quot;ADD_TODO&quot;, data };}export const changeInput = text =&gt; ({ type: &quot;CHANGE_INPUT&quot;, text}); Reducer변화를 일으키는 함수로, 이전의 상태와 action을 합쳐서 새로운 state를 만든다. 따라서 reducer는 state, action이라는 두 파라미터를 받아오고, 새로운 상태를 만들어 반환한다. 초기 상태는 reducer의 디폴트 인수에서 정의 상태가 변할 때 전해진 state는 자체의 값으로 대체 되는 것이 아니고, 합성이 되는 것처럼 쓰여지며 반환된 state는 store에 바로 반영된다.12345678910import { ADD_VALUE } from './actions';​export default (state = {value: 0}, action) =&gt; { switch (action.type) { case ADD_VALUE: return { ...state, value: state.value + action.payload }; default: return state; }} Dispatchstore의 내장함수 중 하나다. action을 발생시키는 것이 dispatch이며, dispatch라는 함수에 파라미터로 action을 전달한다. 호출이 되면 store에서 reducer 함수를 실행시키고, 해당 액션을 처리하는 로직이 있을 경우 액션을 참고하고 새로운 상태로 만들어준다. Pure Component and Connected Component 123456789101112131415161718&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 함수판import React, { Component } from 'react';import { connect } from 'react-redux';import { addValue } from './actions';​const Counter = ({ value, dispatchAddValue }) =&gt; ( &lt;div&gt; Value: {value} &lt;a href=&quot;#&quot; onClick={e =&gt; dispatchAddValue(1)}&gt;+1&lt;/a&gt; &lt;a href=&quot;#&quot; onClick={e =&gt; dispatchAddValue(2)}&gt;+2&lt;/a&gt; &lt;/div&gt;);​export default connect( state =&gt; ({ value: state.value }), dispatch =&gt; ({ dispatchAddValue: amount =&gt; dispatch(addValue(amount)) }))(Counter) Redux 사용 예제12345678910111213141516171819202122232425262728293031323334import { createStore } from 'redux'/*- reducer : (state,action) =&gt; state 형태의 순수 함수리듀서는 액션이 어떻게 상태를 다음 상태로 변경하는지 서술- 상태의 모양은 primitive, array, objective, 자료구조까지 전부 가능.-&gt; 가장 중요한 점은 상태 객체를 변경해서는 안된다는 것. 그리고 상태가 바뀌면 새로운 객체를 반환해야 한다는 것. */function counter(state = 0, action) { switch (action.type) { case 'INCREMENT': return state + 1 case 'DECREMENT': return state - 1 default: return state }}// 앱의 상태를 보관하는 redux 저장소를 생성// api로는 {subscribe, dispatch, getState}가 존재.let store = createStore(counter)// subscribe를 이용해 상태 변화에 따른 ui 변경 가능store.subscribe(() =&gt; console.log(store.getState())))// 내부 상태를 변경하는 유일한 방법 -&gt; 액션을 보내는 것!store.dispatch({ type: 'INCREMENT' })store.dispatch({ type: 'INCREMENT' })store.dispatch({ type: 'DECREMENT' })","link":"/2021/04/05/Redux/"},{"title":"리액트로 TO DO LIST 구현하기","text":"CRUD … 입력창에 새로 입력한 내용이 데이터로 추가되어야한다. 추가된 데이터를 렌더링하여 웹페이지로 읽어올 수 있어야한다. 기존에 작성된 내용을 수정하여 업데이트 할 수 있어야한다. delete 버튼을 눌렀을 떄, 목록에서 삭제 될 수 있어야 한다. ! update 파트를 구현하기 위해서 hook 이용하여 수정해보기","link":"/2021/04/03/new-post/"}],"tags":[],"categories":[]}